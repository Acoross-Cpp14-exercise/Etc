// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: s_protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "s_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace acoross {
namespace s_protocol {

namespace {

const ::google::protobuf::Descriptor* s_version_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  s_version_reflection_ = NULL;
const ::google::protobuf::Descriptor* Test_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Test_reflection_ = NULL;
const ::google::protobuf::Descriptor* Test2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Test2_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Test2_Type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_s_5fprotocol_2eproto() {
  protobuf_AddDesc_s_5fprotocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "s_protocol.proto");
  GOOGLE_CHECK(file != NULL);
  s_version_descriptor_ = file->message_type(0);
  static const int s_version_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_version, version_num_),
  };
  s_version_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      s_version_descriptor_,
      s_version::default_instance_,
      s_version_offsets_,
      -1,
      -1,
      -1,
      sizeof(s_version),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_version, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_version, _is_default_instance_));
  Test_descriptor_ = file->message_type(1);
  static const int Test_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test, type_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test, val2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test, val3_),
  };
  Test_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Test_descriptor_,
      Test::default_instance_,
      Test_offsets_,
      -1,
      -1,
      -1,
      sizeof(Test),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test, _is_default_instance_));
  Test2_descriptor_ = file->message_type(2);
  static const int Test2_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test2, val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test2, etype_),
  };
  Test2_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Test2_descriptor_,
      Test2::default_instance_,
      Test2_offsets_,
      -1,
      -1,
      -1,
      sizeof(Test2),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test2, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test2, _is_default_instance_));
  Test2_Type_descriptor_ = Test2_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_s_5fprotocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      s_version_descriptor_, &s_version::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Test_descriptor_, &Test::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Test2_descriptor_, &Test2::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_s_5fprotocol_2eproto() {
  delete s_version::default_instance_;
  delete s_version_reflection_;
  delete Test::default_instance_;
  delete Test_reflection_;
  delete Test2::default_instance_;
  delete Test2_reflection_;
}

void protobuf_AddDesc_s_5fprotocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020s_protocol.proto\022\022acoross.s_protocol\" "
    "\n\ts_version\022\023\n\013version_num\030\001 \001(\005\"C\n\004Test"
    "\022\020\n\010type_url\030\001 \001(\t\022\r\n\005value\030\002 \001(\014\022\014\n\004val"
    "2\030\003 \001(\003\022\014\n\004val3\030\004 \001(\005\"c\n\005Test2\022\013\n\003val\030\001 "
    "\001(\005\022-\n\005etype\030\002 \001(\0162\036.acoross.s_protocol."
    "Test2.Type\"\036\n\004Type\022\n\n\006ENUM_0\020\000\022\n\n\006ENUM_1"
    "\020\001b\006proto3", 250);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "s_protocol.proto", &protobuf_RegisterTypes);
  s_version::default_instance_ = new s_version();
  Test::default_instance_ = new Test();
  Test2::default_instance_ = new Test2();
  s_version::default_instance_->InitAsDefaultInstance();
  Test::default_instance_->InitAsDefaultInstance();
  Test2::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_s_5fprotocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_s_5fprotocol_2eproto {
  StaticDescriptorInitializer_s_5fprotocol_2eproto() {
    protobuf_AddDesc_s_5fprotocol_2eproto();
  }
} static_descriptor_initializer_s_5fprotocol_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int s_version::kVersionNumFieldNumber;
#endif  // !_MSC_VER

s_version::s_version()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:acoross.s_protocol.s_version)
}

void s_version::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

s_version::s_version(const s_version& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:acoross.s_protocol.s_version)
}

void s_version::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  version_num_ = 0;
}

s_version::~s_version() {
  // @@protoc_insertion_point(destructor:acoross.s_protocol.s_version)
  SharedDtor();
}

void s_version::SharedDtor() {
  if (this != default_instance_) {
  }
}

void s_version::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* s_version::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return s_version_descriptor_;
}

const s_version& s_version::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s_5fprotocol_2eproto();
  return *default_instance_;
}

s_version* s_version::default_instance_ = NULL;

s_version* s_version::New(::google::protobuf::Arena* arena) const {
  s_version* n = new s_version;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void s_version::Clear() {
  version_num_ = 0;
}

bool s_version::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acoross.s_protocol.s_version)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 version_num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_num_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acoross.s_protocol.s_version)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acoross.s_protocol.s_version)
  return false;
#undef DO_
}

void s_version::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acoross.s_protocol.s_version)
  // optional int32 version_num = 1;
  if (this->version_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version_num(), output);
  }

  // @@protoc_insertion_point(serialize_end:acoross.s_protocol.s_version)
}

::google::protobuf::uint8* s_version::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:acoross.s_protocol.s_version)
  // optional int32 version_num = 1;
  if (this->version_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version_num(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:acoross.s_protocol.s_version)
  return target;
}

int s_version::ByteSize() const {
  int total_size = 0;

  // optional int32 version_num = 1;
  if (this->version_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->version_num());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_version::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const s_version* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const s_version>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void s_version::MergeFrom(const s_version& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.version_num() != 0) {
    set_version_num(from.version_num());
  }
}

void s_version::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s_version::CopyFrom(const s_version& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_version::IsInitialized() const {

  return true;
}

void s_version::Swap(s_version* other) {
  if (other == this) return;
  InternalSwap(other);
}
void s_version::InternalSwap(s_version* other) {
  std::swap(version_num_, other->version_num_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata s_version::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = s_version_descriptor_;
  metadata.reflection = s_version_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// s_version

// optional int32 version_num = 1;
void s_version::clear_version_num() {
  version_num_ = 0;
}
 ::google::protobuf::int32 s_version::version_num() const {
  // @@protoc_insertion_point(field_get:acoross.s_protocol.s_version.version_num)
  return version_num_;
}
 void s_version::set_version_num(::google::protobuf::int32 value) {
  
  version_num_ = value;
  // @@protoc_insertion_point(field_set:acoross.s_protocol.s_version.version_num)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Test::kTypeUrlFieldNumber;
const int Test::kValueFieldNumber;
const int Test::kVal2FieldNumber;
const int Test::kVal3FieldNumber;
#endif  // !_MSC_VER

Test::Test()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:acoross.s_protocol.Test)
}

void Test::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Test::Test(const Test& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:acoross.s_protocol.Test)
}

void Test::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  val2_ = GOOGLE_LONGLONG(0);
  val3_ = 0;
}

Test::~Test() {
  // @@protoc_insertion_point(destructor:acoross.s_protocol.Test)
  SharedDtor();
}

void Test::SharedDtor() {
  type_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Test::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Test::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Test_descriptor_;
}

const Test& Test::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s_5fprotocol_2eproto();
  return *default_instance_;
}

Test* Test::default_instance_ = NULL;

Test* Test::New(::google::protobuf::Arena* arena) const {
  Test* n = new Test;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Test::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Test*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(val2_, val3_);
  type_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool Test::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acoross.s_protocol.Test)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string type_url = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type_url().data(), this->type_url().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "acoross.s_protocol.Test.type_url"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional bytes value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_val2;
        break;
      }

      // optional int64 val2 = 3;
      case 3: {
        if (tag == 24) {
         parse_val2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &val2_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_val3;
        break;
      }

      // optional int32 val3 = 4;
      case 4: {
        if (tag == 32) {
         parse_val3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &val3_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acoross.s_protocol.Test)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acoross.s_protocol.Test)
  return false;
#undef DO_
}

void Test::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acoross.s_protocol.Test)
  // optional string type_url = 1;
  if (this->type_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type_url().data(), this->type_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "acoross.s_protocol.Test.type_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type_url(), output);
  }

  // optional bytes value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  // optional int64 val2 = 3;
  if (this->val2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->val2(), output);
  }

  // optional int32 val3 = 4;
  if (this->val3() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->val3(), output);
  }

  // @@protoc_insertion_point(serialize_end:acoross.s_protocol.Test)
}

::google::protobuf::uint8* Test::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:acoross.s_protocol.Test)
  // optional string type_url = 1;
  if (this->type_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type_url().data(), this->type_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "acoross.s_protocol.Test.type_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type_url(), target);
  }

  // optional bytes value = 2;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  // optional int64 val2 = 3;
  if (this->val2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->val2(), target);
  }

  // optional int32 val3 = 4;
  if (this->val3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->val3(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:acoross.s_protocol.Test)
  return target;
}

int Test::ByteSize() const {
  int total_size = 0;

  // optional string type_url = 1;
  if (this->type_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type_url());
  }

  // optional bytes value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  // optional int64 val2 = 3;
  if (this->val2() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->val2());
  }

  // optional int32 val3 = 4;
  if (this->val3() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->val3());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Test::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Test* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Test>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Test::MergeFrom(const Test& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.type_url().size() > 0) {

    type_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_url_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.val2() != 0) {
    set_val2(from.val2());
  }
  if (from.val3() != 0) {
    set_val3(from.val3());
  }
}

void Test::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Test::CopyFrom(const Test& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Test::IsInitialized() const {

  return true;
}

void Test::Swap(Test* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Test::InternalSwap(Test* other) {
  type_url_.Swap(&other->type_url_);
  value_.Swap(&other->value_);
  std::swap(val2_, other->val2_);
  std::swap(val3_, other->val3_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Test::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Test_descriptor_;
  metadata.reflection = Test_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Test

// optional string type_url = 1;
void Test::clear_type_url() {
  type_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Test::type_url() const {
  // @@protoc_insertion_point(field_get:acoross.s_protocol.Test.type_url)
  return type_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Test::set_type_url(const ::std::string& value) {
  
  type_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:acoross.s_protocol.Test.type_url)
}
 void Test::set_type_url(const char* value) {
  
  type_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:acoross.s_protocol.Test.type_url)
}
 void Test::set_type_url(const char* value, size_t size) {
  
  type_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:acoross.s_protocol.Test.type_url)
}
 ::std::string* Test::mutable_type_url() {
  
  // @@protoc_insertion_point(field_mutable:acoross.s_protocol.Test.type_url)
  return type_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Test::release_type_url() {
  
  return type_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Test::set_allocated_type_url(::std::string* type_url) {
  if (type_url != NULL) {
    
  } else {
    
  }
  type_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type_url);
  // @@protoc_insertion_point(field_set_allocated:acoross.s_protocol.Test.type_url)
}

// optional bytes value = 2;
void Test::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Test::value() const {
  // @@protoc_insertion_point(field_get:acoross.s_protocol.Test.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Test::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:acoross.s_protocol.Test.value)
}
 void Test::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:acoross.s_protocol.Test.value)
}
 void Test::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:acoross.s_protocol.Test.value)
}
 ::std::string* Test::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:acoross.s_protocol.Test.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Test::release_value() {
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Test::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:acoross.s_protocol.Test.value)
}

// optional int64 val2 = 3;
void Test::clear_val2() {
  val2_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Test::val2() const {
  // @@protoc_insertion_point(field_get:acoross.s_protocol.Test.val2)
  return val2_;
}
 void Test::set_val2(::google::protobuf::int64 value) {
  
  val2_ = value;
  // @@protoc_insertion_point(field_set:acoross.s_protocol.Test.val2)
}

// optional int32 val3 = 4;
void Test::clear_val3() {
  val3_ = 0;
}
 ::google::protobuf::int32 Test::val3() const {
  // @@protoc_insertion_point(field_get:acoross.s_protocol.Test.val3)
  return val3_;
}
 void Test::set_val3(::google::protobuf::int32 value) {
  
  val3_ = value;
  // @@protoc_insertion_point(field_set:acoross.s_protocol.Test.val3)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Test2_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Test2_Type_descriptor_;
}
bool Test2_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Test2_Type Test2::ENUM_0;
const Test2_Type Test2::ENUM_1;
const Test2_Type Test2::Type_MIN;
const Test2_Type Test2::Type_MAX;
const int Test2::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Test2::kValFieldNumber;
const int Test2::kEtypeFieldNumber;
#endif  // !_MSC_VER

Test2::Test2()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:acoross.s_protocol.Test2)
}

void Test2::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Test2::Test2(const Test2& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:acoross.s_protocol.Test2)
}

void Test2::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  val_ = 0;
  etype_ = 0;
}

Test2::~Test2() {
  // @@protoc_insertion_point(destructor:acoross.s_protocol.Test2)
  SharedDtor();
}

void Test2::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Test2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Test2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Test2_descriptor_;
}

const Test2& Test2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s_5fprotocol_2eproto();
  return *default_instance_;
}

Test2* Test2::default_instance_ = NULL;

Test2* Test2::New(::google::protobuf::Arena* arena) const {
  Test2* n = new Test2;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Test2::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Test2*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(val_, etype_);

#undef ZR_HELPER_
#undef ZR_

}

bool Test2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acoross.s_protocol.Test2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 val = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &val_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_etype;
        break;
      }

      // optional .acoross.s_protocol.Test2.Type etype = 2;
      case 2: {
        if (tag == 16) {
         parse_etype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_etype(static_cast< ::acoross::s_protocol::Test2_Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acoross.s_protocol.Test2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acoross.s_protocol.Test2)
  return false;
#undef DO_
}

void Test2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acoross.s_protocol.Test2)
  // optional int32 val = 1;
  if (this->val() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->val(), output);
  }

  // optional .acoross.s_protocol.Test2.Type etype = 2;
  if (this->etype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->etype(), output);
  }

  // @@protoc_insertion_point(serialize_end:acoross.s_protocol.Test2)
}

::google::protobuf::uint8* Test2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:acoross.s_protocol.Test2)
  // optional int32 val = 1;
  if (this->val() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->val(), target);
  }

  // optional .acoross.s_protocol.Test2.Type etype = 2;
  if (this->etype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->etype(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:acoross.s_protocol.Test2)
  return target;
}

int Test2::ByteSize() const {
  int total_size = 0;

  // optional int32 val = 1;
  if (this->val() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->val());
  }

  // optional .acoross.s_protocol.Test2.Type etype = 2;
  if (this->etype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->etype());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Test2::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Test2* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Test2>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Test2::MergeFrom(const Test2& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.val() != 0) {
    set_val(from.val());
  }
  if (from.etype() != 0) {
    set_etype(from.etype());
  }
}

void Test2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Test2::CopyFrom(const Test2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Test2::IsInitialized() const {

  return true;
}

void Test2::Swap(Test2* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Test2::InternalSwap(Test2* other) {
  std::swap(val_, other->val_);
  std::swap(etype_, other->etype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Test2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Test2_descriptor_;
  metadata.reflection = Test2_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Test2

// optional int32 val = 1;
void Test2::clear_val() {
  val_ = 0;
}
 ::google::protobuf::int32 Test2::val() const {
  // @@protoc_insertion_point(field_get:acoross.s_protocol.Test2.val)
  return val_;
}
 void Test2::set_val(::google::protobuf::int32 value) {
  
  val_ = value;
  // @@protoc_insertion_point(field_set:acoross.s_protocol.Test2.val)
}

// optional .acoross.s_protocol.Test2.Type etype = 2;
void Test2::clear_etype() {
  etype_ = 0;
}
 ::acoross::s_protocol::Test2_Type Test2::etype() const {
  // @@protoc_insertion_point(field_get:acoross.s_protocol.Test2.etype)
  return static_cast< ::acoross::s_protocol::Test2_Type >(etype_);
}
 void Test2::set_etype(::acoross::s_protocol::Test2_Type value) {
  
  etype_ = value;
  // @@protoc_insertion_point(field_set:acoross.s_protocol.Test2.etype)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace s_protocol
}  // namespace acoross

// @@protoc_insertion_point(global_scope)
