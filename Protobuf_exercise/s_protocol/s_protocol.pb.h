// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: s_protocol.proto

#ifndef PROTOBUF_s_5fprotocol_2eproto__INCLUDED
#define PROTOBUF_s_5fprotocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace acoross {
namespace s_protocol {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_s_5fprotocol_2eproto();
void protobuf_AssignDesc_s_5fprotocol_2eproto();
void protobuf_ShutdownFile_s_5fprotocol_2eproto();

class Test;
class Test2;
class s_version;

enum Test2_Type {
  Test2_Type_ENUM_0 = 0,
  Test2_Type_ENUM_1 = 1,
  Test2_Type_Test2_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Test2_Type_Test2_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Test2_Type_IsValid(int value);
const Test2_Type Test2_Type_Type_MIN = Test2_Type_ENUM_0;
const Test2_Type Test2_Type_Type_MAX = Test2_Type_ENUM_1;
const int Test2_Type_Type_ARRAYSIZE = Test2_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Test2_Type_descriptor();
inline const ::std::string& Test2_Type_Name(Test2_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Test2_Type_descriptor(), value);
}
inline bool Test2_Type_Parse(
    const ::std::string& name, Test2_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Test2_Type>(
    Test2_Type_descriptor(), name, value);
}
// ===================================================================

class s_version : public ::google::protobuf::Message {
 public:
  s_version();
  virtual ~s_version();

  s_version(const s_version& from);

  inline s_version& operator=(const s_version& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const s_version& default_instance();

  void Swap(s_version* other);

  // implements Message ----------------------------------------------

  inline s_version* New() const { return New(NULL); }

  s_version* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const s_version& from);
  void MergeFrom(const s_version& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(s_version* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 version_num = 1;
  void clear_version_num();
  static const int kVersionNumFieldNumber = 1;
  ::google::protobuf::int32 version_num() const;
  void set_version_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:acoross.s_protocol.s_version)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 version_num_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_s_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_s_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_s_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static s_version* default_instance_;
};
// -------------------------------------------------------------------

class Test : public ::google::protobuf::Message {
 public:
  Test();
  virtual ~Test();

  Test(const Test& from);

  inline Test& operator=(const Test& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Test& default_instance();

  void Swap(Test* other);

  // implements Message ----------------------------------------------

  inline Test* New() const { return New(NULL); }

  Test* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Test& from);
  void MergeFrom(const Test& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Test* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string type_url = 1;
  void clear_type_url();
  static const int kTypeUrlFieldNumber = 1;
  const ::std::string& type_url() const;
  void set_type_url(const ::std::string& value);
  void set_type_url(const char* value);
  void set_type_url(const char* value, size_t size);
  ::std::string* mutable_type_url();
  ::std::string* release_type_url();
  void set_allocated_type_url(::std::string* type_url);

  // optional bytes value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // optional int64 val2 = 3;
  void clear_val2();
  static const int kVal2FieldNumber = 3;
  ::google::protobuf::int64 val2() const;
  void set_val2(::google::protobuf::int64 value);

  // optional int32 val3 = 4;
  void clear_val3();
  static const int kVal3FieldNumber = 4;
  ::google::protobuf::int32 val3() const;
  void set_val3(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:acoross.s_protocol.Test)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr type_url_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::int64 val2_;
  ::google::protobuf::int32 val3_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_s_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_s_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_s_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static Test* default_instance_;
};
// -------------------------------------------------------------------

class Test2 : public ::google::protobuf::Message {
 public:
  Test2();
  virtual ~Test2();

  Test2(const Test2& from);

  inline Test2& operator=(const Test2& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Test2& default_instance();

  void Swap(Test2* other);

  // implements Message ----------------------------------------------

  inline Test2* New() const { return New(NULL); }

  Test2* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Test2& from);
  void MergeFrom(const Test2& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Test2* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Test2_Type Type;
  static const Type ENUM_0 = Test2_Type_ENUM_0;
  static const Type ENUM_1 = Test2_Type_ENUM_1;
  static inline bool Type_IsValid(int value) {
    return Test2_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Test2_Type_Type_MIN;
  static const Type Type_MAX =
    Test2_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Test2_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Test2_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Test2_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Test2_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 val = 1;
  void clear_val();
  static const int kValFieldNumber = 1;
  ::google::protobuf::int32 val() const;
  void set_val(::google::protobuf::int32 value);

  // optional .acoross.s_protocol.Test2.Type etype = 2;
  void clear_etype();
  static const int kEtypeFieldNumber = 2;
  ::acoross::s_protocol::Test2_Type etype() const;
  void set_etype(::acoross::s_protocol::Test2_Type value);

  // @@protoc_insertion_point(class_scope:acoross.s_protocol.Test2)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 val_;
  int etype_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_s_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_s_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_s_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static Test2* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// s_version

// optional int32 version_num = 1;
inline void s_version::clear_version_num() {
  version_num_ = 0;
}
inline ::google::protobuf::int32 s_version::version_num() const {
  // @@protoc_insertion_point(field_get:acoross.s_protocol.s_version.version_num)
  return version_num_;
}
inline void s_version::set_version_num(::google::protobuf::int32 value) {
  
  version_num_ = value;
  // @@protoc_insertion_point(field_set:acoross.s_protocol.s_version.version_num)
}

// -------------------------------------------------------------------

// Test

// optional string type_url = 1;
inline void Test::clear_type_url() {
  type_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Test::type_url() const {
  // @@protoc_insertion_point(field_get:acoross.s_protocol.Test.type_url)
  return type_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Test::set_type_url(const ::std::string& value) {
  
  type_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:acoross.s_protocol.Test.type_url)
}
inline void Test::set_type_url(const char* value) {
  
  type_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:acoross.s_protocol.Test.type_url)
}
inline void Test::set_type_url(const char* value, size_t size) {
  
  type_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:acoross.s_protocol.Test.type_url)
}
inline ::std::string* Test::mutable_type_url() {
  
  // @@protoc_insertion_point(field_mutable:acoross.s_protocol.Test.type_url)
  return type_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Test::release_type_url() {
  
  return type_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Test::set_allocated_type_url(::std::string* type_url) {
  if (type_url != NULL) {
    
  } else {
    
  }
  type_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type_url);
  // @@protoc_insertion_point(field_set_allocated:acoross.s_protocol.Test.type_url)
}

// optional bytes value = 2;
inline void Test::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Test::value() const {
  // @@protoc_insertion_point(field_get:acoross.s_protocol.Test.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Test::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:acoross.s_protocol.Test.value)
}
inline void Test::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:acoross.s_protocol.Test.value)
}
inline void Test::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:acoross.s_protocol.Test.value)
}
inline ::std::string* Test::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:acoross.s_protocol.Test.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Test::release_value() {
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Test::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:acoross.s_protocol.Test.value)
}

// optional int64 val2 = 3;
inline void Test::clear_val2() {
  val2_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Test::val2() const {
  // @@protoc_insertion_point(field_get:acoross.s_protocol.Test.val2)
  return val2_;
}
inline void Test::set_val2(::google::protobuf::int64 value) {
  
  val2_ = value;
  // @@protoc_insertion_point(field_set:acoross.s_protocol.Test.val2)
}

// optional int32 val3 = 4;
inline void Test::clear_val3() {
  val3_ = 0;
}
inline ::google::protobuf::int32 Test::val3() const {
  // @@protoc_insertion_point(field_get:acoross.s_protocol.Test.val3)
  return val3_;
}
inline void Test::set_val3(::google::protobuf::int32 value) {
  
  val3_ = value;
  // @@protoc_insertion_point(field_set:acoross.s_protocol.Test.val3)
}

// -------------------------------------------------------------------

// Test2

// optional int32 val = 1;
inline void Test2::clear_val() {
  val_ = 0;
}
inline ::google::protobuf::int32 Test2::val() const {
  // @@protoc_insertion_point(field_get:acoross.s_protocol.Test2.val)
  return val_;
}
inline void Test2::set_val(::google::protobuf::int32 value) {
  
  val_ = value;
  // @@protoc_insertion_point(field_set:acoross.s_protocol.Test2.val)
}

// optional .acoross.s_protocol.Test2.Type etype = 2;
inline void Test2::clear_etype() {
  etype_ = 0;
}
inline ::acoross::s_protocol::Test2_Type Test2::etype() const {
  // @@protoc_insertion_point(field_get:acoross.s_protocol.Test2.etype)
  return static_cast< ::acoross::s_protocol::Test2_Type >(etype_);
}
inline void Test2::set_etype(::acoross::s_protocol::Test2_Type value) {
  
  etype_ = value;
  // @@protoc_insertion_point(field_set:acoross.s_protocol.Test2.etype)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace s_protocol
}  // namespace acoross

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::acoross::s_protocol::Test2_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::acoross::s_protocol::Test2_Type>() {
  return ::acoross::s_protocol::Test2_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_s_5fprotocol_2eproto__INCLUDED
